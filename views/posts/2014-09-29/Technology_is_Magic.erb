<article>
  <hgroup>
    <h2>Magic</h2>
  </hgroup>
  <section id="post_excerpt">When it comes to programming, especially in the beginning when you are learning, there is a lot of magic that goes on. Of course there is a lot we are expected to know and understand on a fundamental level. But as we code, and push, install, and connect there can be quite a lot of cause and effect where a simple line of code can lead to a long list of complex actions and outcomes. These seemingly miraculous cause and effects have surfaced repeatedly this first month of Ada Developers Academy. Over the past month, we rarely go a day without a reference to the magic that goes on somewhere beneath the hardware of our laptops. When Bookis explained our blog assignment, he asked us what we would have liked to know before we began this endeavor four weeks ago. While this topic might not be filled with the technical explanations and analysis that will fill future posts I write, the idea of magic seems to me a good place to start. Going into this program, I was aware that there is a lot that I just don’t understand when it comes to technology, and more specifically software development and systems communication. However, before this program, my lack of understanding often led to feelings of inadequacy and self-doubt. How could I be effective in the field? How could I write code if I didn’t understand the ecosystem in which it lives with perfect clarity? One of the things I appreciate most about Ada (and there are many) is first, that these moments of super-duper technological complexity are referred to as magic. They are presented as events that we do not need to fully understand at this point in our studies, and that we will come to understand as we continue to devote time to coding. Perhaps there will be certain things that will remain magic long into our careers, and that’s okay, too. Being confident and competent in something is not tied to knowing everything; it is not about getting rid of all the magic. Don’t get me wrong, the magic can be frustrating. There’s a big part of me that wants to make sense of all the inner workings of the software we deal with and the hardware that enables us to create. But on the flip-side, the magic is exciting. It’s in these moments that the power of computers becomes apparent. Their capacity to do is beautifully overwhelming. So I suppose, if I am writing this to my past self (or others who are considering learning to program), I would stress that it’s perfectly reasonable to not understand everything that’s going on, that that seems to come more from doing than anything, and so the only way to get anywhere is to be patient with yourself, and try and try again. </section>
</article>
